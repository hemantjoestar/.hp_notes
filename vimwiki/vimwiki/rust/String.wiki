:String:str:

https://blog.thoughtram.io/string-vs-str-in-rust/


String
- store the String object for my_name on the stack
- The object comes with a pointer to a heap-allocated buffer which holds 
- the actual data, the buffer’s capacity and the length of the data that is being stored. 
- the size of the String object itself is always fixed and three words long.

String slices (or str)  
- either reference a range of UTF-8 text that is “owned” by someone else
- or when we create them using string literals
- in practice string slices are always references so their type will always be &str instead of str

String Literal
- string literals are a bit special. 
- They are string slices that refer to “preallocated text” that is stored in read-only memory as part of the executable. 
- In other words, it’s memory that ships with our program and doesn’t rely on buffers allocated in the heap
- That said, there’s still an entry on the stack that points to that preallocated memory when the program is executed

super powerful feature called deref coercing 
- which allows it to turn any passed String reference using the borrow operator, so &String, to a &str before the API is executed

